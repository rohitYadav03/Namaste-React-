React First Class - Short Notes üìù
1Ô∏è‚É£ React CDN ‚Äì Used React via CDN without installing npm.

Included React and ReactDOM using <script> tags.
2Ô∏è‚É£ React.createElement() ‚Äì Creates elements instead of writing HTML.


const heading = React.createElement("h1", {}, "Hello World from React");
1st argument: Tag name ("h1")
2nd argument: Attributes ({})
3rd argument: Content ("Hello World from React")

3Ô∏è‚É£ Rendering in React ‚Äì Uses root.render() to show elements on the page.


const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(heading);
Converts React object into an actual HTML element and displays it.

4Ô∏è‚É£ Nested Elements in React

Multiple elements inside React.createElement() use an array [].

const parent = React.createElement("div", { id: "parent" }, [
    React.createElement("div", { id: "child" }, [
        React.createElement("h1", {}, "I am h1 tag"),
        React.createElement("h2", {}, "I am h2 tag")
    ])
]);
root.render(parent);
Creates a nested structure dynamically.

5Ô∏è‚É£ React Element ‚Üí Object ‚Üí HTML

React elements are JavaScript objects, converted into HTML by ReactDOM.
6Ô∏è‚É£ Next Class: JSX

JSX makes writing React easier (e.g., <h1>Hello JSX</h1> instead of React.createElement()).
Key Takeaways ‚úÖ
‚úî React uses React.createElement() instead of plain HTML.
‚úî ReactDOM renders React elements into the browser.
‚úî Nested elements are passed as an array.
‚úî React elements are objects before being converted to HTML.

------------Episode2 Notes-------------------------------------------------------------------
‚Äì package.json => Defines project metadata, dependencies, and scripts.
 contains all the important information about your project, including:
‚úîÔ∏è Project Name (name)
‚úîÔ∏è Version (version)
‚úîÔ∏è Description (description)
‚úîÔ∏è Dependencies (dependencies) ‚Üí Required packages
‚úîÔ∏è Dev Dependencies (devDependencies) ‚Üí Packages needed only for development
‚úîÔ∏è Scripts (scripts) ‚Üí Commands like npm start
‚úîÔ∏è Main File (main) ‚Üí Entry point of the project

It helps npm manage dependencies and makes your project easy to share and install


‚Äì package-lock.json locks the exact versions of all installed dependencies to ensure consistency.
‚Äì node_modules/ is a folder that stores all the installed dependencies for your project.
‚Äì dependencies =>  Required for running the project.
‚Äì devDependencies => Required only for development (not production).

- #JSX (JavaScript XML) => JSX must return only ONE root element.

JSX is a syntax extension that allows you to write HTML-like code inside JavaScript.
It gets transpiled into React.createElement calls using Babel (a JavaScript compiler).
Attributes in JSX use camelCase (className, onClick instead of class, onclick).
This is syntactic sugar for React.createElement.

üî• Transpilation Process: Babel transpiles JSX into plain JavaScript that browsers understand.

JSX ‚Üí Babel converts it into React.createElement.
React.createElement ‚Üí Creates a JavaScript object representation of the element.
JavaScript object ‚Üí React renders it into an actual DOM element.

- #Functional Components (Modern React)
Functional components are JavaScript functions that return JSX.
They start with a capital letter by convention.
because how JSX is transpiled and how browsers handle HTML elements
- it should must return JSX

- #Component Composition => is the process of nesting one component inside another

1. Is JSX mandatory for React?
No, but it makes coding easier by allowing HTML & JavaScript together.
Without JSX, you need React.createElement(), which is complex.

2. Is ES6 mandatory for React?
No, but recommended.
ES6+ makes React code cleaner and better (e.g., let/const, arrow functions, classes).

3. {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>}
{TitleComponent} ‚Üí Refers to a JavaScript variable/function.
{<TitleComponent/>} ‚Üí Renders a React component.
{<TitleComponent></TitleComponent>} ‚Üí Used when adding child components inside.

4. How to write comments in JSX?
Use {/* comment */} inside JSX.

5. What is <React.Fragment></React.Fragment> and <></>?
  Wrap multiple elements without extra <div> tags.
<></> is a shorter version of <React.Fragment>

6. Why do we need keys in React?
Keys help React identify list items & update only changed ones.

7. Can we use index as a key in React?
Yes, but not recommended (may cause UI bugs if items change order).
Use unique IDs instead.

8. What are props in React?
Props (properties) pass data from parent to child components.

9.  What is Config Driven UI?
UI changes based on config files (JSON) instead of hardcoded values.
Useful for dynamic & scalable apps.

10. Virtual DOM vs Real DOM
Feature	 Virtual DOM	      |  Real DOM
Speed	 Fast	              | Slow
Updates	 Only updates changes |	Updates everything
Memory	 Efficient	          |  Wastes memory
React uses Virtual DOM ‚Üí Updates only changed elements ‚Üí Faster UI! üöÄ

export/Import ->
1. defult => export defult FileName;
2. Named export or Imort => use {} during named import and write export before the variable

useState hook => 
react fiber 
virtual dom 
diff algorith 
reconsilation 
how react.js work and why it is fast 

class 5

1. Export & Import in JavaScript

-> Default Export (export default)

Only one default export per file.
Imported without curly braces ({}).
Import name can be different from the exported name.

-> Named Export (export)

Can export multiple values from a module.
Must use curly braces ({}) when importing.

-> #useState Hook (State Management)
useState is a React Hook for managing state in functional components.
State updates trigger re-renders.
Batching: Multiple state updates inside event handlers are combined.

-> 3. React Fiber (New Reconciliation Algorithm)
Introduced in React 16 for better UI rendering.
Key Features:
Interruptible Rendering: Can pause and resume rendering.
Priority Scheduling: UI updates are prioritized.
Concurrency: Handles multiple tasks efficiently.
Error Recovery: Can recover from UI errors without crashing the whole app.

4. Virtual DOM (VDOM)
Virtual DOM is a lightweight copy of the Real DOM.
React compares Virtual DOM versions to update the UI efficiently.
Why not update the real DOM directly?
Direct DOM updates are slow and trigger multiple reflows.
Virtual DOM minimizes updates by calculating only the necessary changes.

5. Diff Algorithm (Efficient DOM Updates)
React compares the new Virtual DOM with the previous Virtual DOM.

Key Optimizations:
Element Type Comparison:
If same type, React updates only attributes.
If different type, React unmounts and mounts a new element.

Keys in Lists:
key helps React identify list items efficiently.
Bad: key={index} (causes unnecessary re-renders).
Good: key={uniqueId}.

6. Reconciliation (Efficient UI Updates)
Reconciliation is React‚Äôs process of updating the UI efficiently.
Steps:
New Virtual DOM is created.
React compares (diffs) the new Virtual DOM with the old one.
React finds the minimal updates.
Updates only the necessary elements in the Real DOM.

7. Why React is Fast?
Virtual DOM: Prevents unnecessary real DOM updates.
Fiber Architecture: Uses concurrent rendering for smooth UI.
Efficient Reconciliation: Uses the diff algorithm to update only changed elements.
Batching Updates: Groups multiple state updates to avoid extra renders.
Concurrent Mode (Newer Feature): Allows React to pause and resume rendering for performance optimization.

# How does React work?

-> React is a JavaScript library that follows a component-based architecture and optimizes UI updates using the Virtual DOM.
Instead of directly updating the Real DOM (which is slow), React creates a lightweight Virtual DOM (a JavaScript object).
When a component's state or props change:
1Ô∏è‚É£ React creates a new Virtual DOM and compares it with the previous one using the Diffing Algorithm.
2Ô∏è‚É£ It finds the differences (minimal updates required) and efficiently updates only the necessary parts of the Real DOM‚Äîthis process is called Reconciliation.
This makes React fast, efficient, and optimized for performance.

# What is JSX?
JSX is a syntax extension for JavaScript that allows writing HTML-like code inside JS.
It makes React components more readable and easier to write.

 Why JSX?
Makes UI structure declarative and easier to visualize.
Babel transpiles it into React.createElement(), which creates the Virtual DOM representation.
Helps in writing cleaner, more maintainable React code.

‚úÖ JSX Rules & Best Practices
1Ô∏è‚É£ JSX must have a single parent element (wrap multiple elements in <>...</> or <div>...</div>).
2Ô∏è‚É£ Use {} to embed JavaScript expressions inside JSX (<h1>{2 + 2}</h1>).
3Ô∏è‚É£ Use className instead of class, since class is a reserved JS keyword.
4Ô∏è‚É£ All tags must be properly closed (<br />, <img src="" />).
5Ô∏è‚É£ Event handlers use camelCase (onClick instead of onclick).

JSX makes React more intuitive and developer-friendly, but ultimately, it's just JavaScript! üöÄ

# What is a Functional Component?
A functional component is a JavaScript function that returns JSX. It is the simplest way to create a component in React.

Key Characteristics
1Ô∏è‚É£ Must start with a capital letter (React treats lowercase as HTML tags).
2Ô∏è‚É£ Returns JSX (or null).
3Ô∏è‚É£ Reusable & composable (can be used inside other components).
4Ô∏è‚É£ No this keyword, unlike class components.
5Ô∏è‚É£ Pure functions ‚Äì They take props as input and return JSX without side effects.

 Component Composition (Using Components Inside Components)

# Props in React:

1Ô∏è‚É£ Props are properties that are passed to a component.
2Ô∏è‚É£ They are passed from parent to child (one-way data flow).
3Ô∏è‚É£ Parent = The component that passes prop.
4Ô∏è‚É£ Child = The component that receives the props.
5Ô∏è‚É£ Props are passed as attributes inside JSX.
6Ô∏è‚É£ Props are immutable ‚Üí The child component cannot modify the props it receives.
7Ô∏è‚É£ We can destructure props to make the code cleaner.

üìå useState Hook :

useState() => is a React Hook used to create and manage state in functional components.

Syntax:
const [state, setState] = useState(initialValue)

How It Works:
state ‚Üí Holds the value.
setState() ‚Üí Function to update the state.
initialValue ‚Üí Starting value of the state.

‚úÖ Key Points of useState
It re-renders the component whenever state changes.
Never update state directly like count++.
Use setState() to update the value.

üìå Handling Events in React
React uses camelCase for event names (not lowercase like HTML).

Event	        Description
onClick	        Click event
onChange	    Input field changes
onSubmit	    Form submission
onMouseEnter	Hover effect
onMouseLeave	Mouse leaves element

üìå Rendering Lists & Keys
Used to display dynamic lists like arrays.
Use .map() method to loop through the list.
‚úÖ Why Keys?
Keys help React identify which items changed or deleted.

Important Points üî•
Always use keys inside .map().
Keys must be unique.

‚úÖ Conditional Rendering allows showing different content based on conditions.

1Ô∏è‚É£ if Statements (Outside JSX)
Used outside JSX to return different components.

2Ô∏è‚É£ Ternary Operator ( ? : )
Inline conditional rendering inside JSX.

condition ? <Component1 /> : <Component2 />
üëâ Best for rendering two options.

3Ô∏è‚É£ && Short-Circuit Evaluation
Renders content only if the condition is true.

condition && <Component />
üëâ Best for showing content based on one condition.

‚ö° Key Points:
Use if outside JSX.
Use ? : inside JSX for two options.
Use && for single condition rendering.
Return null if nothing needs to be shown.

# What is useEffect() Hook?
The useEffect hook is used to perform side effects in React components.
Side Effects mean:

API calls
DOM Manipulation
Event Listeners
Timers (setInterval, setTimeout)
Subscriptions

üîë Syntax

useEffect(() => {
  // Your Side Effect Code
  return () => {
    // Cleanup Code (Optional)
  };
}, [dependencies]);


üéØ How useEffect() Works
Case	                       When will it run?	                  Cleanup Run
No Dependency Array	           On every render + re-render üîÑ	    ‚úÖ Yes (Every re-render)
Empty Dependency []	           Only on page load üî•	               ‚úÖ Only on Unmount
With Dependencies [count]	   Runs only when dependencies change    ‚úÖ Before running the effect again

üß† Why Do We Need return() inside useEffect()?
The return inside useEffect() is used to clean up side effects like:

Clearing Timers
Removing Event Listeners
Cancelling API Requests
Unsubscribing from Streams


üéØ Rule of Thumb üß†
Task	                Cleanup Needed?
API Call	            ‚ùå No
Timers	                ‚úÖ Yes
Event Listeners	        ‚úÖ Yes
DOM Manipulation	    ‚úÖ Yes
State Changes	       ‚ùå No
Local Storage	       ‚ùå No
Subscriptions(WebSocket, Audio Streams)	‚úÖ Yes

Why Cleanup Is Needed?
If we don't use the return(), the old effect will still run in memory even if the component is removed or re-rendered ‚Äî This will create Memory Leaks.

1Ô∏è‚É£ Monolithic vs Microservices Architecture
üìå What is Monolithic Architecture?
A monolithic application is built as a single unit, where the frontend, backend, database, and all functionalities are part of one big codebase.

üîπ How does it work?
Everything is inside a single project.
If you want to update one feature, the whole application must be redeployed.
‚úÖ Advantages:
‚úî Simpler to develop and deploy.
‚úî Easier to debug (since everything is in one place).
‚úî Works well for small applications.

‚ùå Disadvantages:
‚úñ Scalability issues: As the app grows, it becomes difficult to manage.
‚úñ Deployment is slow: A small change requires redeploying the entire app.
‚úñ Single point of failure: If one part crashes, the entire app goes down.

üõ† Example:
A basic e-commerce app where the frontend (React), backend (Node.js/Express), and database (MongoDB) all exist in one single codebase.

üìå What is Microservices Architecture?
A microservices application is divided into multiple small, independent services that communicate with each other through APIs.

üîπ How does it work?
Each microservice has its own database and logic.
Services communicate using API calls (REST, GraphQL).
Each service can be deployed separately.
‚úÖ Advantages:
‚úî Easier to scale ‚Äì add/remove features without affecting other services.
‚úî More reliable ‚Äì if one service fails, others continue working.
‚úî Faster development ‚Äì different teams can work on different services.

‚ùå Disadvantages:
‚úñ More complex ‚Äì requires strong API communication.
‚úñ Debugging is harder ‚Äì since logs and errors are spread across different services.

üõ† Example:
A large e-commerce app with separate microservices for:

User Authentication
Product Catalog
Order Management
Payment Processing

2Ô∏è‚É£ When Should You Make an API Call?
üìå Approach 1: Call API Before Rendering (Bad Approach)
Page Loads
Fetch API Data
Render UI
‚ùå Problems:
‚úñ UI takes time to load (users see a blank screen).
‚úñ Bad user experience if the API is slow.

üìå Approach 2: Render UI First, Then Fetch API Data (Better Approach)
Page Loads ‚Üí Render UI (Show Loading State)
Fetch API Data in the background.
Update UI when data is received.
‚úÖ Why is this better?
‚úî Faster page load (UI renders quickly).
‚úî Better user experience (loading state visible).
‚úî Handles slow API responses gracefully.

3Ô∏è‚É£ useEffect Hook ‚Äì Handling Side Effects
üìå What is useEffect?
A React Hook used to handle side effects (API calls, timers, event listeners).
Runs after rendering, not during.

‚úÖ Why use useEffect for API calls?
‚úî Ensures API calls happen only when needed.
‚úî Prevents unnecessary API requests on every render

7Ô∏è‚É£ Shimmer UI (Skeleton Loading Effect)
üìå What is a Shimmer UI?
A loading effect (gray boxes or skeleton screens) shown while data is being fetched.

9Ô∏è‚É£ React Reconciliation & Rendering Optimization
üìå What Happens When State Updates?
React detects state change.
It compares old Virtual DOM with new one.
Only the changed parts of the UI get updated.
‚úî Optimizes performance by avoiding unnecessary updates.

1. What is React Router DOM?
React Router DOM is a library used for routing in React applications.
It allows navigation between different components without reloading the page.

2. Installation
To install React Router DOM, use:

npm install react-router-dom

3. createBrowserRouter
‚úÖ Function to create routes in React.

Syntax:

const router = createBrowserRouter([
  {
    path: "/",
    element: <Home />
  },
  {
    path: "/about",
    element: <About />
  }
]);
üî• What Does It Do?
It defines the path and which component (element) should render on that path.
It works with Browser History API to prevent page reloads.

4. RouterProvider
‚úÖ Special component that provides the router instance to your entire app.

Syntax:
<RouterProvider router={appRouter} />

What Happens Here?
The router prop is passed.
It renders the correct component based on the current URL.
Without RouterProvider, routing won't work.

5. Link Component
‚úÖ The Link component is used to navigate between pages without refreshing the page.

Syntax:
<Link to="/about">About</Link>

How Is It Different from <a> Tag?

<a> Tag	Link Component            <Link>
Refreshes the page	              Does not refresh
Default HTML tag	                React Component
Breaks Single Page App	          Maintains Single Page App

What is NavLink?
‚úÖ NavLink is a special component in React Router that is used to create navigation links with active styles.

How It Works?
It automatically gives an object as an argument to the className prop.

That object contains:
isActive ‚Üí true if the link is active, otherwise false
isPending ‚Üí true if the link is still loading (optional)
isTransitioning ‚Üí true if the route is changing (optional)

Syntax:

<NavLink 
  to="/about" 
  className={({ isActive }) => isActive ? "active" : ""}
>
  About
</NavLink>

What does className Expect?
‚úÖ It expects a function that automatically receives an object.

How to Use?
Destructure the isActive property from the object.
Apply different CSS classes based on the value of isActive

<NavLink 
  to="/home" 
  className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
>
  Home
</NavLink>

‚úÖ Error Handling in React Router 
In React Router v6, error handling is done using:

errorElement ‚Üí To show custom error pages.
useRouteError() ‚Üí To access error details inside the error page.

1Ô∏è‚É£ What is errorElement?
üëâ It is used to show custom error pages when:
1. The user enters the wrong URL (404 Error)
2. There is a problem while rendering the component.
üîë Syntax:

{
  path: "/about",
  element: <About />,
  errorElement: <ErrorPage />
}

2Ô∏è‚É£ What is useRouteError()?
üëâ It is a hook that gives information about the error like:

error.status ‚Üí Error Code (404, 500)
error.statusText ‚Üí Error Message (Not Found, Internal Server Error)
error.data ‚Üí Any extra error data
üîë Syntax:

import { useRouteError } from "react-router-dom";

const ErrorPage = () => {
  const error = useRouteError();

  return (
    <div>
      <h1>{error.status} - {error.statusText}</h1>
      <p>{error.data || "Something went wrong!"}</p>
    </div>
  );
};

üí™ What is the Best Way to Add errorElement?
Situation	                 How to Add
Parent + Child Routes	     Add error only to the Parent Route ‚úÖ
Independent Routes	       Add errorElement to every route

Best Practice:
Always add errorElement to parent routes only, unless your routes are independent.

üî• What is Dynamic Routing?
Dynamic Routing means creating routes where URL parameters (like IDs, names, etc.) can change based on user input or data.

Example URL:
/user/rohit
/user/123

üõ†Ô∏è How to Create Dynamic Routes?
First, define your route with : before the parameter name.

{
    path: "/user/:name",  // :name is dynamic
    element: <Profile />
}

üí° How to Access URL Parameters?
React Router provides a hook üëâ useParams()

const { name } = useParams();
console.log(name);  // It will give whatever is written in the URL

üîë Important Points:
Concept	Explanation
useParams()	Used to access dynamic parameters from the URL

Route with :	This makes the route dynamic
String Always Returned	All URL params are strings
Validation	Use Regex or custom conditions to validate parameters
‚úÖ Always validate and convert the parameter type before using it in your logic.


üö® How to Handle Wrong Dynamic Routes?
‚úÖ Use errorElement in routes to show custom error pages.

üéØ Interview Questions (Very Important üî•)
Question	                                     Answer
What is Dynamic Routing?	                     Routes that accept dynamic parameters like ID, name, etc.
How to access dynamic parameters?	             Using the useParams() hook
Do dynamic parameters always return string?	   Yes, React Router always gives string values
How to show an error page for wrong URLs?	     Use errorElement with useRouteError()


NavLink	                                   useNavigate()
Used inside JSX	                           Used inside JavaScript functions
Automatically adds active class	           Does not add any class
Best for navigation links	                 Best for buttons, forms, or programmatic navigation

üîë 1. useNavigate()
üëâ useNavigate() is a hook that helps to navigate between routes programmatically using JavaScript.

Example:

const navigate = useNavigate();
navigate("/about");  // Navigates to /about route
‚úÖ Best for navigation on button click or any event.

üîë 2. Go Back Navigation
üëâ We can navigate back to the previous page using:

navigate(-1);

üîë 3. <Navigate /> Component
üëâ It helps to redirect automatically without button clicks.

Example:

return isLoggedIn ? <Dashboard /> : <Navigate to="/" />
‚úÖ Used in Protected Routes or unauthorized access.

üî• Key Differences
Method	               Purpose	                When to Use
useNavigate()	         Navigation on Event	    Button Click
<Navigate />          Automatic Redirection	    Protected Pages

üîë What is useSearchParams()?
‚úÖ A React Router DOM hook used to read, update, and delete query parameters from the URL.

Example URL:
üëâ https://example.com/products?category=electronics&price=1000




